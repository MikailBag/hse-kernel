diff --git a/./raw/linux-5.11.11/fs/proc/base.c b/./linux/fs/proc/base.c
index b3422cd..ef1c036 100644
--- a/./raw/linux-5.11.11/fs/proc/base.c
+++ b/./linux/fs/proc/base.c
@@ -635,6 +635,15 @@ static int proc_pid_limits(struct seq_file *m, struct pid_namespace *ns,
 	return 0;
 }
 
+/* Display schedules count for a process */
+static int proc_pid_scheds(struct seq_file *m, struct pid_namespace *ns,
+			   struct pid *pid, struct task_struct *task)
+{
+	seq_printf(m, "%u\n", task->schedules);
+	
+	return 0;
+}
+
 #ifdef CONFIG_HAVE_ARCH_TRACEHOOK
 static int proc_pid_syscall(struct seq_file *m, struct pid_namespace *ns,
 			    struct pid *pid, struct task_struct *task)
@@ -3170,6 +3179,7 @@ static const struct pid_entry tgid_base_stuff[] = {
 	ONE("status",     S_IRUGO, proc_pid_status),
 	ONE("personality", S_IRUSR, proc_pid_personality),
 	ONE("limits",	  S_IRUGO, proc_pid_limits),
+	ONE("schedule_count", S_IRUGO, proc_pid_scheds),
 #ifdef CONFIG_SCHED_DEBUG
 	REG("sched",      S_IRUGO|S_IWUSR, proc_pid_sched_operations),
 #endif
@@ -3514,6 +3524,7 @@ static const struct pid_entry tid_base_stuff[] = {
 	ONE("status",    S_IRUGO, proc_pid_status),
 	ONE("personality", S_IRUSR, proc_pid_personality),
 	ONE("limits",	 S_IRUGO, proc_pid_limits),
+	//ONE("schedule_count", S_IRUGO, proc_pid_scheds),
 #ifdef CONFIG_SCHED_DEBUG
 	REG("sched",     S_IRUGO|S_IWUSR, proc_pid_sched_operations),
 #endif
diff --git a/./raw/linux-5.11.11/include/linux/sched.h b/./linux/include/linux/sched.h
index 6e3a5ee..77ba10a 100644
--- a/./raw/linux-5.11.11/include/linux/sched.h
+++ b/./linux/include/linux/sched.h
@@ -663,6 +663,7 @@ struct task_struct {
 	 */
 	randomized_struct_fields_start
 
+	unsigned int schedules;
 	void				*stack;
 	refcount_t			usage;
 	/* Per task flags (PF_*), defined further below: */
diff --git a/./raw/linux-5.11.11/kernel/sched/core.c b/./linux/kernel/sched/core.c
index f005650..c32cb42 100644
--- a/./raw/linux-5.11.11/kernel/sched/core.c
+++ b/./linux/kernel/sched/core.c
@@ -3465,8 +3465,10 @@ try_to_wake_up(struct task_struct *p, unsigned int state, int wake_flags)
 unlock:
 	raw_spin_unlock_irqrestore(&p->pi_lock, flags);
 out:
-	if (success)
+	if (success) {
+		p->schedules++;
 		ttwu_stat(p, task_cpu(p), wake_flags);
+	}
 	preempt_enable();
 
 	return success;
